import sqlite3
import time
from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN, REFERAL_REWARD, BOT_NAME, ADMIN, CHANNEL_LINK, CHAT_LINK, ADMIN_USERNAME, OTZIVI_LINK, VIVODI_LINK, BOT_USERNAME, RULETKA_LINK, RULETKA_LINK2, BONUS_REWARD, DAILY_REWARD, CLICKER_REWARD
from keyboards import start_keyboard, earn_stars_keyboard, profile_keyboard, instruction_keyboard, roulette_keyboard, withdraw_keyboard, admin_confirm_keyboard, top_keyboard, promocode_keyboard, back_menu_keyboard, admin_cmd_keyboard, vizruzka_keyboard, tasks_keyboard, otziv_keyboard

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect("users.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    stars INTEGER DEFAULT 0,
    last_click INTEGER DEFAULT 0,
    referals INTEGER DEFAULT 0,
    username TEXT,
    admin INTEGER DEFAULT 0,
    activated INTEGER DEFAULT 0,
    withdrawal_request INTEGER DEFAULT 0,
    last_bonus INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS promo_codes (
    code TEXT PRIMARY KEY,
    reward INTEGER,
    uses_left INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS withdraw_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount INTEGER,
    timestamp INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS tasks (
    task_id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER,
    title TEXT,
    reward INTEGER,
    active INTEGER DEFAULT 1
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_tasks (
    user_id INTEGER,
    task_id INTEGER,
    status TEXT DEFAULT 'pending', -- 'completed', 'skipped', 'pending'
    PRIMARY KEY (user_id, task_id)
)
""")

conn.commit()

promo_active = set()  # –ö—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
promo_creation = {}   # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∞–¥–º–∏–Ω–∞–º–∏
promo_deletion = set()
pending_give_stars = {}   # user_id -> True
pending_take_stars = {}   # user_id -> True
task_creation = {}

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    args = message.get_args()

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (user_id, stars, referals, activated, username) VALUES (?, 0, 0, 0, ?)", (user_id, username))
        conn.commit()

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if args and args.isdigit() and int(args) != user_id:
        referer_id = int(args)

        cursor.execute("SELECT activated FROM users WHERE user_id = ?", (user_id,))
        ref_user = cursor.fetchone()
        if ref_user and ref_user[0] == 0:
            cursor.execute("UPDATE users SET stars = stars + ?, referals = referals + 1 WHERE user_id = ?", (REFERAL_REWARD, referer_id))
            cursor.execute("UPDATE users SET activated = 1 WHERE user_id = ?", (user_id,))
            conn.commit()

            try:
                await bot.send_message(referer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {REFERAL_REWARD} ‚≠êÔ∏è")
            except:
                pass

    text = (
        "1Ô∏è‚É£ <b>–ü–æ–ª—É—á–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É ‚Äî</b> –∂–º–∏ ¬´‚≠êÔ∏è\n –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã¬ª\n"
        "2Ô∏è‚É£ <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî 25000</b>‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
        "‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
        "<blockquote><b>‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã</b>\n<b>(–ü—Ä–æ—Ñ–∏–ª—å)</b>\n"
        "<b>‚Äî –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è\n–ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π –±–∞–ª–∞–Ω—Å!</b>\n"
        "<b>‚Äî –£—á–∞—Å—Ç–≤—É–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–∞ —Ç–æ–ø</b>\n"
        "<b>‚Äî –î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ\n–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã\n–≤ Telegram Beta.</b></blockquote>\n\n"
        "üîª <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"
    )

    with open("1–ø–∞—Ç—Ä–∏–∫ —Å –ª–æ–≥–æ (–ø–æ—Å—Ç –ª–æ–≥–æ)_1.mp4", "rb") as video:
        await bot.send_video(
            chat_id=message.chat.id,
            video=video,
            caption=text,
            reply_markup=start_keyboard(),
            parse_mode="HTML"
        )
        
@dp.message_handler(commands=["adm"])
async def admin_command_handler(message: types.Message):
    user_id = message.from_user.id

    if user_id not in ADMIN:
        return

    text = (
        "üëë –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Patrick`a. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "<blockquote>"
        "- <code>—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</code>\n"
        "- <code>—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</code>\n"
        "- <code>–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã</code>\n"
        "- <code>–≤—ã–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã [ID]</code>\n"
        "- <code>–∑–∞–±—Ä–∞—Ç—å –∑–≤–µ–∑–¥—ã [ID]</code>\n"
        "</blockquote>"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=admin_cmd_keyboard())
    
@dp.callback_query_handler(lambda c: c.data == "vizruzka")
async def handle_vizruzka(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id not in ADMIN:
        return  # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤—ã–≥—Ä—É–∑–∫–∏
    text = "üì¶ –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"
    await callback_query.message.edit_text(
        text,
        reply_markup=vizruzka_keyboard(),
        parse_mode="HTML"
    )
    
@dp.callback_query_handler(lambda c: c.data == "dump_users")
async def handle_dump_users(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN:
        return

    db_path = "users.db"

    try:
        await bot.send_document(
            chat_id=callback_query.from_user.id,
            document=types.InputFile(db_path),
            caption="üì¶ –í—ã–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (users.db)"
        )
        await callback_query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ users.db: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.", show_alert=True)
        
@dp.message_handler(text=["–≤—ã–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã"])
async def give_stars_command(message: types.Message):
    if message.from_user.id not in ADMIN:
        return
    pending_give_stars[message.from_user.id] = True
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <code>ID</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: <code>123456789 50</code>", parse_mode="HTML")

@dp.message_handler(text=["–∑–∞–±—Ä–∞—Ç—å –∑–≤–µ–∑–¥—ã"])
async def take_stars_command(message: types.Message):
    if message.from_user.id not in ADMIN:
        return
    pending_take_stars[message.from_user.id] = True
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <code>ID</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –∑–∞–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: <code>123456789 25</code>", parse_mode="HTML")

@dp.message_handler(lambda message: message.from_user.id in pending_give_stars or message.from_user.id in pending_take_stars)
async def process_admin_star_change(message: types.Message):
    try:
        parts = message.text.strip().split()
        target_id = int(parts[0])
        amount = float(parts[1])

        if message.from_user.id in pending_give_stars:
            cursor.execute("UPDATE users SET stars = stars + ? WHERE user_id = ?", (amount, target_id))
            conn.commit()
            await message.answer(f"‚úÖ –í—ã –≤—ã–¥–∞–ª–∏ {amount} ‚≠êÔ∏è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
            await bot.send_message(target_id, f"üéÅ –í–∞–º –≤—ã–¥–∞–Ω–æ {amount} ‚≠êÔ∏è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
            pending_give_stars.pop(message.from_user.id)

        elif message.from_user.id in pending_take_stars:
            cursor.execute("UPDATE users SET stars = stars - ? WHERE user_id = ?", (amount, target_id))
            conn.commit()
            await message.answer(f"‚úÖ –í—ã –∑–∞–±—Ä–∞–ª–∏ {amount} ‚≠êÔ∏è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
            await bot.send_message(target_id, f"‚õîÔ∏è –£ –≤–∞—Å –±—ã–ª–æ —Å–Ω—è—Ç–æ {amount} ‚≠êÔ∏è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
            pending_take_stars.pop(message.from_user.id)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÅ –ï–∂–µ–¥–Ω–µ–≤–∫–∞"
@dp.callback_query_handler(lambda c: c.data == "daily_bonus")
async def daily_bonus_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    cursor.execute("SELECT stars, last_bonus FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    stars, last_bonus = user
    current_time = int(time.time())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—á–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    try:
        user_info = await bot.get_chat(user_id)
        bio = user_info.bio or ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        referral_link = f"t.me/{BOT_NAME}?start={user_id}"

        if referral_link not in bio and ("https://" + referral_link) not in bio:
            await callback_query.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                show_alert=True
            )
            return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback_query.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    if last_bonus and current_time - last_bonus < 86400:  # 24 —á–∞—Å–∞ = 86400 —Å–µ–∫—É–Ω–¥
        await callback_query.answer("‚ùå –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞!", show_alert=True)
        return

    # –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å
    new_stars = stars + {DAILY_REWARD}
    cursor.execute("UPDATE users SET stars = ?, last_bonus = ? WHERE user_id = ?", (new_stars, current_time, user_id))
    conn.commit()

    await callback_query.answer(f"‚úÖ –¢—ã –ø–æ–ª—É—á–∏–ª(–∞) –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {DAILY_REWARD} ‚≠ê", show_alert=True)
    
@dp.callback_query_handler(lambda c: c.data.startswith("confirm_withdraw_"))
async def confirm_withdraw_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    user_id = int(data[2])
    amount = int(data[3])

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–≤–æ–¥ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    cursor.execute("UPDATE users SET withdrawal_request = 0 WHERE user_id = ?", (user_id,))
    conn.commit()

    await callback_query.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –∑–≤–µ–∑–¥—ã –≤—ã–≤–µ–¥–µ–Ω—ã.")

    # –ü–æ–ª—É—á–∞–µ–º username
    cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    username = user[0] if user else "–ë–µ–∑ –Ω–∏–∫–∞"

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    timestamp = int(time.time())
    cursor.execute(
        "INSERT INTO withdraw_history (user_id, amount, timestamp) VALUES (?, ?, ?)",
        (user_id, amount, timestamp)
    )
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (ID –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)
    request_id = cursor.lastrowid

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    text = f"""
‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{request_id} </b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} | ID: {user_id}
üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}‚≠êÔ∏è

üîÑ –°—Ç–∞—Ç—É—Å: <b>–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b> üéÅ

<a href="{CHANNEL_LINK}">–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a> | <a href="{CHAT_LINK}">–ß–∞—Ç</a> | <a href="https://t.me/{BOT_USERNAME}">–ë–æ—Ç</a>
"""

    await bot.send_message(
        chat_id=VIVODI_LINK,
        text=text,
        disable_web_page_preview=True,
        parse_mode="HTML"
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        user_id,
        f"üéâ <b><a href=\"{ADMIN_USERNAME}\">–ü–∞—Ç—Ä–∏–∫</a> –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!</b>\n–û—Å—Ç–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–∑—ã–≤ –∏ —Å–∫–æ—Ä–µ–µ\n–Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ‚≠ê –Ω–∞ –Ω–æ–≤—ã–π\n–ø–æ–¥–∞—Ä–æ–∫üíñ",
        reply_markup=otziv_keyboard(),
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("reject_withdraw_"))
async def reject_withdraw_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    user_id = int(data[2])
    amount = int(data[3])

    # –û—Ç–∫–ª–æ–Ω—è–µ–º ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤–µ–∑–¥—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    cursor.execute("UPDATE users SET stars = stars + ?, withdrawal_request = 0 WHERE user_id = ?", (amount, user_id))
    conn.commit()

    await callback_query.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω, –∑–≤–µ–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    await bot.send_message(user_id, f"üòî –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} ‚≠êÔ∏è –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–ó–≤–µ–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")

@dp.callback_query_handler(lambda c: c.data == 'earn_stars')
async def earn_stars_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    text = (
        "üéâ <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –ø–æ 3 ‚≠êÔ∏è –æ—Ç</b>\n<b>–ü–∞—Ç—Ä–∏–∫–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –ø–æ</b>\n<b>—Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!</b>\n\n"
        "üîó <u><b>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞</b> (–Ω–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</u>:\n\n"
        f"<code>https://t.me/{BOT_NAME}?start={user_id}</code>\n\n"
        "üöÄ <b>–ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ?</b>\n"
        "<blockquote> ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üë•\n"
        " ‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Å–≤–æ–µ–º –¢–ì –∏–ª–∏ –≤ —Å–≤–æ–µ–º Telegram –∫–∞–Ω–∞–ª–µ üì±\n"
        " ‚Ä¢ –û—Å—Ç–∞–≤—å –µ—ë –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —á–∞—Ç–∞—Ö üó®\n"
        " ‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: TikTok, Instagram, WhatsApp –∏ –¥—Ä—É–≥–∏—Ö üåç</blockquote>"
    )

    with open("–§–ª–µ–∫—Å–∏—Ç_1.mp4", "rb") as video:
        await bot.send_video(
            chat_id=callback_query.message.chat.id,
            video=video,
            caption=text,
            parse_mode="HTML",
            reply_markup=earn_stars_keyboard(user_id)
        )
        
@dp.callback_query_handler(lambda c: c.data == 'top')
async def top_callback(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT user_id, referals FROM users ORDER BY referals DESC LIMIT 3
    """)
    top_users = cursor.fetchall()

    top_text = "<b>üèÜ –¢–æ–ø 3 –∑–∞ –¥–µ–Ω—å:</b>\n\n"
    
    if not top_users or all(referals == 0 for _, referals in top_users):
        top_text = "üèÜ <b>–¢–æ–ø 3 –∑–∞ –¥–µ–Ω—å:</b>\n\n<blockquote><b>- –ò–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ –µ—â—ë –Ω–µ—Ç—É</b> üò™</blockquote>\n\n<b>–ü–æ–ø–∞–¥–∏ –≤ —Ç–æ–ø 3 –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–∑ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è:</b>\n<blockquote>- 1–æ–µ –º–µ—Å—Ç–æ + 200‚≠êÔ∏è\n- 2–æ–µ –º–µ—Å—Ç–æ + 100‚≠êÔ∏è\n- 3–µ –º–µ—Å—Ç–æ + 50‚≠êÔ∏è</blockquote>\n<b>‚ú® –¢—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ç–æ–ø–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.</b>"
    else:
        for i, (user_id, referals) in enumerate(top_users, 1):
            cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
            user = cursor.fetchone()
            username = user[0] if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–æ–ø
            top_text += f"ü•á {username} | –î—Ä—É–∑–µ–π: {referals}\n" if i == 1 else \
                        f"ü•à {username} | –î—Ä—É–∑–µ–π: {referals}\n" if i == 2 else \
                        f"ü•â {username} | –î—Ä—É–∑–µ–π: {referals}\n"

        top_text +="""
<b>–ü–æ–ø–∞–¥–∏ –≤ —Ç–æ–ø 3 –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–∑ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è:</b>
<blockquote>- 1–æ–µ –º–µ—Å—Ç–æ + 200‚≠êÔ∏è
- 2–æ–µ –º–µ—Å—Ç–æ + 100‚≠êÔ∏è
- 3–µ –º–µ—Å—Ç–æ + 50‚≠êÔ∏è</blockquote>"""
    
    user_id = callback_query.from_user.id
    cursor.execute("SELECT referals FROM users WHERE user_id = ?", (user_id,))
    user_referals = cursor.fetchone()[0]

    if user_referals == 0 and not any(user_id == u[0] for u in top_users):
        top_text += "\n‚ú® <b>–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ç–æ–ø–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.</b>"

    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=top_text,
        parse_mode="HTML",
        reply_markup=top_keyboard(user_id)
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'back_to_menu')
async def back_to_menu(callback_query: types.CallbackQuery):
    await start_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == "clicker")
async def clicker_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cursor.execute("SELECT last_click FROM users WHERE user_id = ?", (user_id,))
    last_click = cursor.fetchone()
    if last_click:
        last_click = last_click[0]
    else:
        last_click = 0

    import time
    current_time = int(time.time())
    cooldown_time = 600

    if current_time - last_click < cooldown_time:
        remaining_time = cooldown_time - (current_time - last_click)
        await callback_query.answer(
            f"‚åõ –ü–æ–¥–æ–∂–¥–∏ {remaining_time // 60} –º–∏–Ω. {remaining_time % 60} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–ª–∏–∫–æ–º",
            show_alert=True
        )
    else:
        cursor.execute("UPDATE users SET last_click = ? WHERE user_id = ?", (current_time, user_id))
        conn.commit()

        cursor.execute("UPDATE users SET stars = stars + ? WHERE user_id = ?", (CLICKER_REWARD, user_id))
        conn.commit()

        await callback_query.answer(f"üåü –¢—ã –ø–æ–ª—É—á–∏–ª(–∞) {CLICKER_REWARD} ‚≠ê!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'profile')
async def profile_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()

    text = (
        "‚ú® <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üë§ <b>–ò–º—è: {callback_query.from_user.username}</b>\n"
        f"üÜî <b>ID: {callback_query.from_user.id}</b>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üë• –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: {user[3]}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {user[6]}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user[1]} ‚≠êÔ∏è \n\n"
        "‚ÅâÔ∏è –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å?\n"
        f"<blockquote>–ü–æ—Å—Ç–∞–≤—å —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–≥ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏ –ø–æ–ª—É—á–∞–π –∑–∞ —ç—Ç–æ +{BONUS_REWARD} ‚≠êÔ∏è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.</blockquote>\n\n"
        "‚¨áÔ∏è  <i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å.</i>"
    )

    with open("1–ø–∞—Ç—Ä–∏–∫ —Å –ª–æ–≥–æ (–ø–æ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—å).mp4", "rb") as video:
        await bot.send_video(
            chat_id=callback_query.message.chat.id,
            video=video,
            caption=text,
            reply_markup=profile_keyboard(),
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –ó–∞–¥–∞–Ω–∏—è"
@dp.callback_query_handler(lambda c: c.data == 'tasks')
async def tasks_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª
    cursor.execute("""
        SELECT tasks.task_id, tasks.title, tasks.reward, tasks.chat_id 
        FROM tasks 
        LEFT JOIN user_tasks ON tasks.task_id = user_tasks.task_id AND user_tasks.user_id = ?
        WHERE tasks.active = 1 AND (user_tasks.status IS NULL OR user_tasks.status = 'pending')
    """, (user_id,))
    tasks = cursor.fetchall()

    if not tasks:
        text = "üéâ <b>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã!</b>"
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=text,
            reply_markup=back_menu_keyboard(),
            parse_mode="HTML"
        )
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
    text = "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
    for task_id, title, reward, chat_id in tasks:
        text += f"üîπ <b>{title}</b>: {reward} ‚≠êÔ∏è\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    first_task = tasks[0]
    task_id, title, reward, chat_id = first_task
    text = f"üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {title}\nüéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {reward} ‚≠êÔ∏è\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É!"

    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=text,
        reply_markup=tasks_keyboard(task_id, chat_id),
        parse_mode="HTML"
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('check_subscription_'))
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    task_id = int(callback_query.data.split('_')[2])
    chat_id = int(callback_query.data.split('_')[3])

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        member = await bot.get_chat_member(chat_id, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–Ω–µ–µ
            cursor.execute("SELECT status FROM user_tasks WHERE user_id = ? AND task_id = ?", (user_id, task_id))
            status = cursor.fetchone()
            if status and status[0] == 'completed':
                await callback_query.answer("‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            cursor.execute("SELECT stars FROM users WHERE user_id = ?", (user_id,))
            current_stars = cursor.fetchone()[0] or 0  # –ï—Å–ª–∏ None, —Å—Ç–∞–≤–∏–º 0
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
            cursor.execute("SELECT reward FROM tasks WHERE task_id = ?", (task_id,))
            reward = cursor.fetchone()[0]
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å, –¥–æ–±–∞–≤–ª—è—è –Ω–∞–≥—Ä–∞–¥—É
            new_stars = current_stars + reward
            cursor.execute("UPDATE users SET stars = ? WHERE user_id = ?", (new_stars, user_id))
            cursor.execute("INSERT OR REPLACE INTO user_tasks (user_id, task_id, status) VALUES (?, ?, ?)", 
                          (user_id, task_id, 'completed'))
            conn.commit()

            await callback_query.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} ‚≠êÔ∏è. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_stars} ‚≠êÔ∏è", show_alert=True)
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º tasks_callback –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            await tasks_callback(callback_query)
        else:
            await callback_query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('skip_task_'))
async def skip_task(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    task_id = int(callback_query.data.split('_')[2])

    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ
    cursor.execute("INSERT OR REPLACE INTO user_tasks (user_id, task_id, status) VALUES (?, ?, ?)", 
                  (user_id, task_id, 'skipped'))
    conn.commit()

    await callback_query.answer("‚ÜóÔ∏è –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è.", show_alert=True)
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º tasks_callback –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    await tasks_callback(callback_query)

# –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@dp.message_handler(commands=['create_task'])
async def create_task_command(message: types.Message):
    user_id = message.from_user.id
    print(f"Received /create_task from user_id: {user_id}")  # –û—Ç–ª–∞–¥–∫–∞
    if user_id not in ADMIN:
        print(f"User {user_id} is not admin")  # –û—Ç–ª–∞–¥–∫–∞
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.", reply_markup=back_menu_keyboard())
        return

    print(f"Starting task creation for user_id: {user_id}")  # –û—Ç–ª–∞–¥–∫–∞
    task_creation[user_id] = {"step": 1}
    await message.answer("‚úÖ –í–≤–µ–¥–∏—Ç–µ —Å—É–ø–µ—Ä ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä: -1234567890000):", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.message_handler(lambda message: message.from_user.id in task_creation)
async def process_task_creation(message: types.Message):
    user_id = message.from_user.id
    data = task_creation[user_id]

    if data["step"] == 1:
        try:
            chat_id = int(message.text.strip())
            data["chat_id"] = chat_id
            data["step"] = 2
            await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä: -1234567890000).")
    elif data["step"] == 2:
        data["title"] = message.text.strip()
        data["step"] = 3
        await message.answer("‚≠ê –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    elif data["step"] == 3:
        try:
            reward = int(message.text.strip())
            cursor.execute("INSERT INTO tasks (chat_id, title, reward, active) VALUES (?, ?, ?, 1)",
                          (data["chat_id"], data["title"], reward))
            conn.commit()
            await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ <b>{data['title']}</b> —Å–æ–∑–¥–∞–Ω–æ!\nüéØ –ù–∞–≥—Ä–∞–¥–∞: {reward} ‚≠ê | –ß–∞—Ç/–∫–∞–Ω–∞–ª: {data['chat_id']}", 
                               parse_mode="HTML", reply_markup=back_menu_keyboard())
            task_creation.pop(user_id)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–≤—ë–∑–¥.")
    
# –†—É–ª–µ—Ç–∫–∞
@dp.callback_query_handler(lambda c: c.data == 'roulette')
async def roulette_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cursor.execute("SELECT stars FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if user:
        stars_balance = user[0]
    else:
        stars_balance = 0

    text = (
        "üé∞ <u><b>–ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!</b></u>\n\n"
        f"üìä <b>–û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π:</b>\n{RULETKA_LINK2}\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {stars_balance} ‚≠êÔ∏è\n\n"
        "‚¨áÔ∏è <b>–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>\n\n"
    )

    with open("0. –ú–∏–Ω–∏ –ò–≥—Ä—ã - –†—É–ª–µ—Ç–∫–∞.mp4", "rb") as video:
        await bot.send_video(
            chat_id=callback_query.message.chat.id,
            video=video,
            caption=text,
            reply_markup=roulette_keyboard(),
            parse_mode="HTML"
        )

    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('bet_'))
async def handle_bet(callback_query: types.CallbackQuery):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º Telegram, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    await callback_query.answer()  # –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã Telegram –Ω–µ –∂–¥–∞–ª

    user_id = callback_query.from_user.id
    bet_amount_str = callback_query.data.split('_')[1]

    try:
        bet_amount = float(bet_amount_str)
    except ValueError:
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏.")  # –≤ —á–∞—Ç, –Ω–µ alert
        return

    cursor.execute("SELECT stars, username FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance, username = result
    else:
        balance = 0
        username = "–ë–µ–∑ –Ω–∏–∫–∞"

    if balance < bet_amount:
        await bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —Å—Ç–∞–≤–∫–∏!")  # –≤ —á–∞—Ç, –Ω–µ alert
        return

    import random
    chance = random.randint(1, 100)
    won = chance <= 35

    if won:
        winnings = bet_amount * 2
        new_balance = balance + winnings
        result_text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª(–∞): {winnings} –∑–≤—ë–∑–¥‚≠ê\n"
            "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üöÄ"
        )
    else:
        winnings = 0
        new_balance = balance - bet_amount
        result_text = (
            "üòï –ù–µ—É–¥–∞—á–∞, –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è,\n"
            "–Ω–∞–¥–µ—é—Å—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–µ–±–µ –ø–æ–≤–µ–∑–µ—Ç üôè"
        )

    cursor.execute("UPDATE users SET stars = ? WHERE user_id = ?", (new_balance, user_id))
    conn.commit()

    if won:
        ruletka_text = f"""
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üèÜ

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) 
–≤—ã–∏–≥—Ä–∞–ª {winnings}‚≠êÔ∏è –Ω–∞ —Å—Ç–∞–≤–∫–µ {bet_amount}‚≠êÔ∏è üé≤

üöÄ –ü—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –≤—ã–∏–≥—Ä—ã—à! üèÜüåü üéâ
"""
        await bot.send_message(
            chat_id=RULETKA_LINK,
            text=ruletka_text,
            disable_web_page_preview=True
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    text = (
        f"üé∞ <u><b>–ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!</b></u>\n\n"
        f"üìä <b>–û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π:</b>\n{RULETKA_LINK2}\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è\n\n"
        "‚¨áÔ∏è <b>–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:</b>\n\n"
    )

    with open("0. –ú–∏–Ω–∏ –ò–≥—Ä—ã - –†—É–ª–µ—Ç–∫–∞.mp4", "rb") as video:
        await bot.send_video(
            chat_id=callback_query.message.chat.id,
            video=video,
            caption=text,
            reply_markup=roulette_keyboard(),
            parse_mode="HTML"
        )

    # –ò —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π message, –Ω–µ alert)
    await bot.send_message(callback_query.message.chat.id, result_text)
        
@dp.callback_query_handler(lambda c: c.data == "instruction")
async def instruction_callback(callback_query: types.CallbackQuery):
    text = (
        "üìå <b> –ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ\n—Å—Å—ã–ª–∫–µ?</b>\n"
        "<blockquote> ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º –≤ –ª–∏—á–Ω—ã–µ\n—Å–æ–æ–±—â–µ–Ω–∏—è üßç‚Äç‚ôÇÔ∏èüßç‚Äç‚ôÄÔ∏è\n"
        "‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –≤ —Å–≤–æ–µ–º –¢–ì\n–∏–ª–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–µ üì£\n"
        "‚Ä¢ –û—Å—Ç–∞–≤—å –µ—ë –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —á–∞—Ç–∞—Ö üó®Ô∏è\n"
        "‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: TikTok,\nInstagram, WhatsApp –∏ –¥—Ä—É–≥–∏—Ö üåç</blockquote>\n\n"
        "ü§© <b>–°–ø–æ—Å–æ–±—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å\n–¥–æ 1000 –∑–≤—ë–∑–¥ –≤ –¥–µ–Ω—å:</b>\n\n"
        "1Ô∏è‚É£ <b>–ü–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–±:</b>\n"
        "<blockquote>1. –ó–∞—Ö–æ–¥–∏–º –≤ TikTok –∏–ª–∏ –õ–∞–π–∫\n"
        "2. –ò—â–µ–º –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º: –∑–≤—ë–∑–¥—ã\n—Ç–µ–ª–µ–≥—Ä–∞–º, –ø–æ–¥–∞—Ä–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–≥ —Å—Ç–∞—Ä—Å—ã –∏\n—Ç.–ø.\n"
        "3. –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞:\n<i>–î–∞—Ä—é –ø–æ–¥–∞—Ä–∫–∏/–∑–≤–µ–∑–¥—ã, –ø–∏—à–∏—Ç–µ –≤ —Ç–≥\n@–≤–∞—à—é–∑–µ—Ä</i>\n"
        "4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É —Ç–µ–º,\n–∫—Ç–æ –ø–∏—à–µ—Ç\n"
        "5. –ñ–¥—ë–º –∏ –≤—ã–≤–æ–¥–∏–º –∑–≤–µ–∑–¥—ã üí∞</blockquote>\n\n"
        "2Ô∏è‚É£ <b>–í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±:</b>\n"
        "<blockquote>1. –ó–∞—Ö–æ–¥–∏–º –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n@leomatchbot\n"
        "2. –î–µ–ª–∞–µ–º –∞–Ω–∫–µ—Ç—É –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞\n"
        "3. –õ–∞–π–∫–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥—Ä—è–¥ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ\n–∂–¥—ë–º –ø–æ–∫–∞ –Ω–∞—Å –ø—Ä–æ–ª–∞–π–∫–∞—é—Ç üíû\n"
        "4. –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å–æ –≤—Å–µ–º–∏ –≤ –õ–° –∏ –ø–∏—à–µ–º:\n<i>–ü—Ä–∏–≤–µ—Ç, –ø–æ–º–æ–≥–∏ –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã. –ü–µ—Ä–µ–π–¥–∏ –∏\n–∞–∫—Ç–∏–≤–∏—Ä—É–π –±–æ—Ç–∞ –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ:</i> <b>¬´—Ç–≤–æ—è\n —Å—Å—ã–ª–∫–∞¬ª</b>\n"
        "5. –ñ–¥—ë–º –∏ –≤—ã–≤–æ–¥–∏–º –∑–≤—ë–∑–¥—ã üåü</blockquote>\n\n"
        "‚ùóÔ∏è<b>–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\nüëâ –¢–´–ö"
    )

    with open("–ø–∞—Ç—Ä–∏–∫ –¥—É–º–∞–µ—Ç.mp4", "rb") as video:
        await bot.send_video(
            chat_id=callback_query.message.chat.id,
            video=video,
            caption=text,
            reply_markup=instruction_keyboard(),
            parse_mode="HTML"
        )

@dp.callback_query_handler(lambda c: c.data == 'withdraw')
async def withdraw_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cursor.execute("SELECT stars, referals FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        return

    stars, referals = user

    text = (
        f"üí∞<b>–ë–∞–ª–∞–Ω—Å:</b> {stars} ‚≠êÔ∏è\n\n"
        f"‚ÄºÔ∏è<b>–î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è:</b>\n"
        f"‚Äî –º–∏–Ω–∏–º—É–º 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞\n"
        f"‚Äî –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à <a href=\"{CHANNEL_LINK}\">–∫–∞–Ω–∞–ª</a>\n\n"
        f"<blockquote>‚úÖ –í—ã–≤–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24-—Ö —á–∞—Å–æ–≤.</blockquote>\n\n"
        f"<b>–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏ –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å:</b>"
    )

    with open("IMG_2673.MP4", "rb") as video:
        await bot.send_video(
            chat_id=callback_query.message.chat.id,
            video=video,
            caption=text,
            reply_markup=withdraw_keyboard(),
            parse_mode="HTML"
        )
  
  # –ü–†–û–ú–û–ö–û–î–´
        
@dp.callback_query_handler(lambda c: c.data == 'promo_code')
async def promo_code_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    promo_active.add(user_id)

    text = (
        "<i>‚ú® –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥ –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –≤–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥: </i>\n"
        f"<i>–ù–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –≤ <a href=\"{CHANNEL_LINK}\">–∫–∞–Ω–∞–ª–µ</a> –∏ <a href=\"{CHAT_LINK}\">—á–∞—Ç–µ</a>.</i>"
    )

    with open("IMG_2669.MP4", "rb") as video:
        await bot.send_video(
            chat_id=callback_query.message.chat.id,
            video=video,
            caption=text,
            reply_markup=promocode_keyboard(),
            parse_mode="HTML"
        )

    await callback_query.answer()

@dp.message_handler(lambda message: message.from_user.id in promo_active)
async def handle_promo_code(message: types.Message):
    user_id = message.from_user.id
    code = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS promo_activations (
        user_id INTEGER,
        code TEXT,
        PRIMARY KEY (user_id, code)
    )
    """)
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–¥
    cursor.execute("SELECT 1 FROM promo_activations WHERE user_id = ? AND code = ?", (user_id, code))
    already_activated = cursor.fetchone()

    if already_activated:
        await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.", reply_markup=back_menu_keyboard())
        promo_active.discard(user_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥
    cursor.execute("SELECT reward, uses_left FROM promo_codes WHERE code = ?", (code,))
    result = cursor.fetchone()

    if result:
        reward, uses_left = result
        if uses_left > 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cursor.execute("UPDATE users SET stars = stars + ? WHERE user_id = ?", (reward, user_id))
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
            cursor.execute("UPDATE promo_codes SET uses_left = uses_left - 1 WHERE code = ?", (code,))
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥
            cursor.execute("INSERT INTO promo_activations (user_id, code) VALUES (?, ?)", (user_id, code))
            conn.commit()

            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {reward} ‚≠êÔ∏è!")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                reply_markup=back_menu_keyboard()
            )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            reply_markup=back_menu_keyboard()
        )

    promo_active.discard(user_id)
    
@dp.message_handler(text=['—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'])
async def delete_promo(message: types.Message):
    if message.from_user.id not in ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.", reply_markup=back_menu_keyboard())
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–∏—Ç—å
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥
    promo_deletion.add(message.from_user.id)

@dp.message_handler(lambda message: message.from_user.id in promo_deletion)
async def process_delete_promo(message: types.Message):
    user_id = message.from_user.id
    code_to_delete = message.text.strip()

    cursor.execute("SELECT code FROM promo_codes WHERE code = ?", (code_to_delete,))
    promo = cursor.fetchone()

    if promo:
        cursor.execute("DELETE FROM promo_codes WHERE code = ?", (code_to_delete,))
        cursor.execute("DELETE FROM promo_activations WHERE code = ?", (code_to_delete,))
        conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code_to_delete}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", reply_markup=back_menu_keyboard(), parse_mode="HTML")
    else:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_menu_keyboard())

    promo_deletion.discard(user_id)

@dp.message_handler(text=['—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'])
async def create_promo(message: types.Message):
    if message.from_user.id not in ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.", reply_markup=back_menu_keyboard())
        return

    promo_creation[message.from_user.id] = {"step": 1}
    await message.answer("üéâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")

@dp.message_handler(lambda message: message.from_user.id in promo_creation)
async def process_promo_creation(message: types.Message):
    user_id = message.from_user.id
    data = promo_creation[user_id]

    if data["step"] == 1:
        data["code"] = message.text.strip()
        data["step"] = 2
        await message.answer("üöÄ –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –±—É–¥–µ—Ç —É –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    elif data["step"] == 2:
        try:
            data["uses_left"] = int(message.text.strip())
            data["step"] = 3
            await message.answer("‚≠ê –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.")
    elif data["step"] == 3:
        try:
            reward = int(message.text.strip())
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –ë–î
            cursor.execute("INSERT OR REPLACE INTO promo_codes (code, reward, uses_left) VALUES (?, ?, ?)",
                           (data["code"], reward, data["uses_left"]))
            conn.commit()

            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{data['code']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\nüéØ –ù–∞–≥—Ä–∞–¥–∞: {reward} ‚≠ê | –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {data['uses_left']}", parse_mode="HTML", reply_markup=back_menu_keyboard())
            promo_creation.pop(user_id)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–≤—ë–∑–¥.")

@dp.message_handler(text=['–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã'])
async def list_promo(message: types.Message):
    if message.from_user.id not in ADMIN:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.", reply_markup=back_menu_keyboard())
        return

    cursor.execute("SELECT code, reward, uses_left FROM promo_codes")
    promos = cursor.fetchall()

    if not promos:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.", reply_markup=back_menu_keyboard())
        return

    text = "<b>‚≠ê –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n\n"
    for code, reward, uses_left in promos:
        text += f"üîπ {code} ‚Äî {reward} ‚≠ê | –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {uses_left}\n"

    await message.answer(text, parse_mode="HTML")

#________________________________________________________________________________________________________________________

@dp.callback_query_handler(lambda c: c.data.startswith('withdraw_'))
async def process_withdraw(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    data = callback_query.data.split('_')
    amount_str = data[1]
    try:
        amount = int(amount_str)
    except ValueError:
        amount = 1700

    cursor.execute("SELECT stars, referals, withdrawal_request FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        return

    stars, referals, withdrawal_request = user

    if withdrawal_request:
        await callback_query.answer(
            "‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è.",
            show_alert=True
        )
        return

    if referals < 5:
        await callback_query.answer(
            "‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–∏–Ω–∏–º—É–º 5 –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞!",
            show_alert=True
        )
        return

    if stars < amount:
        await callback_query.answer(
            f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞!",
            show_alert=True
        )
        return

    new_stars = stars - amount
    cursor.execute("UPDATE users SET stars = ?, withdrawal_request = 1 WHERE user_id = ?", (new_stars, user_id))
    conn.commit()

    text = (
        f"<b>@{username}</b> –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã–≤–æ–¥ —Å–≤–æ–∏—Ö –∑–≤—ë–∑–¥!\n\n"
        f"üíé <b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏:</b> {amount} ‚≠êÔ∏è"
    )

    for admin_id in ADMIN:
        await bot.send_message(
            chat_id=admin_id,
            text=text,
            reply_markup=admin_confirm_keyboard(user_id, amount),
            parse_mode="HTML"
        )

    await callback_query.answer(
        "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
        show_alert=True
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
